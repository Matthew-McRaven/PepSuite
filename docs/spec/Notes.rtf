{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf500
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Bold;\f1\fnil\fcharset0 HelveticaNeue;\f2\fswiss\fcharset0 Helvetica-Bold;
\f3\fswiss\fcharset0 Helvetica;\f4\fmodern\fcharset0 CourierNewPSMT;\f5\froman\fcharset0 Times-Roman;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;}
\margl1440\margr1440\vieww11820\viewh15980\viewkind0
\deftab560
\pard\pardeftab560\slleading20\partightenfactor0

\f0\b\fs24 \cf0 No disk port:\

\f1\b0 	Rejected the idea of having a disk port in the interest of memory-map simplicity.\
\
\

\f0\b Handling unimplemented opcodes:\

\f1\b0 	In the interest of memory-map simplicity, do not have a fault handler and associated vector. Specify the hardware to execute unimplemented opcodes as NOP. Should be extremely rare, in fact too rare to justify the additional complexity.\
\
\

\f0\b Writing system calls:\

\f1\b0 	A system call consists of a LDWT followed by a SYCALL or USYCALL.\
	It will load an address from the memory vectors (FFF2?) containing the address of the invalid opcode trap handler.\
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab560\pardirnatural\partightenfactor0

\f2\b \cf0 Defining system calls in operating system:\

\f3\b0 	.SYCALL creates a macro for the passed symbol, creating a non-unary system call macro\
	.USYCALL create a macro for a unary system call.\
	.EXPORT allows a symbol from the operating system to be referenced in user code.\
\
So a full call declaration would be a .SYCALL followed by a .EXPORT.\
\
\pard\pardeftab720\sl280\partightenfactor0

\f4 \cf2 \expnd0\expndtw0\kerning0
      .SYCALL DECI\
      .EXPORT DECI\
DECI: LDWA    0x00FE,i    ;Assert d, n, s, sf, x, sx, sfx\
      STWA    addrMask,d\
      CALL    assertAd\
      CALL    setAddr     ;Set address of trap operand\
      SUBSP   13,i        ;Allocate storage for locals\
      LDWA    FALSE,i     ;isOvfl <- FALSE\
      ...............
\f5 \
\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab560\pardirnatural\partightenfactor0

\f2\b \cf0 \kerning1\expnd0\expndtw0 Operating system calls:\

\f3\b0 	Include two system calls named MYNOP and MYUNOP as placeholders for students to modify to add new system calls. MYUNOP would require\
\
\pard\pardeftab720\sl280\partightenfactor0

\f4 \cf2 \expnd0\expndtw0\kerning0
      .USYCALL MYUNOP\
      .EXPORT  MYUNOP\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardeftab560\pardirnatural\partightenfactor0

\f3 \cf0 \kerning1\expnd0\expndtw0 \
\

\f2\b Macro facility:\

\f3\b0 	Each macro must be declared in its own  \'93.pepm\'94 file - no inline declarations\
	The name of the .pepm must match the name of the macro.\
	DEco <=> DECO, case insensitive macros.\
\
	Reference a macro in your code by @MACRO_NAME.\
	Inside of a PEPM file, the first line must be @MACRO_NAME <number of arguments>.\
	Reference arguments by their order, %1 %2.\
	Macro assembler simply applies textual substitution.\
\
	When you create a system call with .SYCALL, a corresponding .pepm is generated.\
\
	category macro editor\
	Cat 1 is hardcoded shipped macros, e.g. @MALLOC\
	Cat 2 is macros generated by OS listing.\
	Cat 3 is the macros found on disk.\
	\
Parse on \'93Install Macro:\
	Check if the files starts with @MACRO_NAME 3\
	Check if the file ends in a .END_MACRO\
	}
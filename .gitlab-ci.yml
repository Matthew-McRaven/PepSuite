stages:
- packages/native
- packages/ui
- packages/theia
- test
- chromatic
- bin
- docs
- deploy

# Variables that must be injected into every pipeline
variables:
  BUILD_VERSION: v0.4.2
  LATEX_VERSION: v0.1.0
  GIT_LFS_SKIP_SMUDGE: '1'
  # Append dist, because I have generated files there
  SAST_EXCLUDED_PATHS: spec, test, tests, tmp, dist
  # Gemnasium crashes my pipelines... this will disable it.
  DS_EXCLUDED_ANALYZERS: "gemnasium"
##################
# Helper anchors #
##################
# A well-configured emscripten environment
.emscripten: &emscripten
  variables:
    GIT_SUBMODULE_STRATEGY: recursive
  image: registry.gitlab.com/pep10/pepsuite/develop:${BUILD_VERSION}
  before_script:
    - source /emsdk/emsdk_env.sh
    - mkdir -p ./yarn

# Enable npm caching on all stages
.cacheable-node: &cacheable-node 
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - .npm/

####################
# Native Libraries #
####################

build:builtins:
  <<: *emscripten
  stage: packages/native
  needs: []
  tags: 
    - docker
  script:
    - cd packages/native/builtins
    - (cd gen && python3 gen.py)
    - mkdir build && cd build
    - cmake ../ -DENABLE_TESTING=1
    - make -j4 && make test
  artifacts:
    name: ${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHA}
    expire_in: 1 week
    reports:
      junit: packages/native/builtins/build/**/junit.xml

build:core:linux:
  <<: *emscripten
  stage: packages/native
  needs: []
  tags: 
    - docker
  script:
    - bash scripts/loop-install.sh || exit 1
    - yarn wasm build:coverage
    - mv packages/native/core/coverage.xml coverage.xml
  coverage: '/^\s*lines.*/'
  artifacts:
    name: ${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHA}
    expire_in: 2 days
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
      junit: packages/native/core/build/**/junit.xml

build:core:wasm:
  <<: *emscripten
  stage: packages/native
  needs: []
  tags: 
    - docker
  script:
    - bash scripts/loop-install.sh || exit 1
    - yarn wasm build:wasm
    - yarn wasm dist
  artifacts:
    name: ${CI_JOB_NAME}-${CI_COMMIT_REF_NAME}-${CI_COMMIT_SHA}
    expire_in: 2 days
    paths:
      - packages/native/core/dist/

docs:core:
  <<: *emscripten
  stage: docs 
  needs: ["build:core:linux"]
  tags: 
    - docker
  script:
    - bash scripts/loop-install.sh || exit 1
    - yarn wasm build:docs
  artifacts:
    expire_in: 1 week
    paths:
      - packages/native/core/build/docs/

docs:spec:
  image: registry.gitlab.com/pep10/pepsuite/latex:${LATEX_VERSION}
  stage: docs 
  needs: []
  tags: 
    - docker
  artifacts:
    paths:
    - docs/spec/pep10-documentation.pdf
  script:
    - cd docs/spec
    - latexmk -xelatex pep10-documentation.tex


###############
# UI Packages #
###############

build:ui:
  <<: *emscripten
  <<: *cacheable-node
  stage: packages/ui
  needs: []
  tags: 
    - docker
  script:
    - bash scripts/loop-install.sh || exit 1
    - yarn ui:build

test:ui:
  <<: *emscripten
  <<: *cacheable-node
  stage: test
  needs: ["build:ui"]
  tags: 
    - docker
  script:
    - bash scripts/loop-install.sh || exit 1
    - yarn ui:test
    - yarn ui:globcov
  coverage: '/^\s*Coverage .*\d+.*/'
  artifacts:
    expire_in: 1 week
    when: always
    reports:
      coverage_report:
        coverage_format: cobertura
        path: packages/**/cobertura-coverage.xml
      junit:
        - packages/**/junit.xml

# Chromatic test
test:chromatic:
  <<: *emscripten
  <<: *cacheable-node
  stage: chromatic
  needs: ['test:ui']
  tags: 
    - docker
  script:
    - bash scripts/loop-install.sh || exit 1
    - yarn storybook:build
    - cd packages/ui
    - npx chromatic --exit-zero-on-changes --project-token ${CHROMATIC_PROJECT_TOKEN} --junit-report junit.xml -d storybook-static
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH || $CI_COMMIT_BRANCH == 'dev'
      when: on_success
      changes:
        - packages/ui/**/*
  artifacts:
    expire_in: 1 week
    when: always
    reports:
      junit:
        - packages/ui/junit.xml

##################
# Build Binaries #
##################
build:ide:windows:
  #See link: https://github.com/electron-userland/electron-builder/issues/3179
  variables:
    USE_HARD_LINKS: 0
  stage: bin
  tags: 
    - windows
    - x86-64
  needs: ['test:ui', 'build:core:wasm']
  before_script:
    - echo "override before_script"
  script:
    - set USE_HARD_LINKS=false
    - bash scripts/loop-install.sh || exit 1
    - yarn ext:build
    # Okay. So electron-builder hates electron rebuild -- and cause mac build to fail when it is installed.
    # But Theia depends on it to do module building. So lets install it globally and make everyone happy
    - npm i -g electron-rebuild
    # Build IDE
    # This step may fail if .browser-modules does not exist. Running it before build ensure build will pass.
    - yarn ide theia rebuild:electron
    - yarn ide theia build && yarn ide theia download:plugins
    # Some installed packages have no install script, and we need to add it so node-gyp doesn't explode.
    - yarn ide:fix
    - yarn ide package
  #artifacts:
    #expire_in: 1 week
    #paths:
      #- bin/ide/dist/<name>.exe

build:ide:macos:
  #See link: https://github.com/electron-userland/electron-builder/issues/3179
  variables:
    USE_HARD_LINKS: 0
  stage: bin
  needs: ['test:ui', 'build:core:wasm']
  tags: 
    - macos
    - x86-64
  script:
    - nvm use 14.18.2
    - export USE_HARD_LINKS=false
    - zsh scripts/loop-install.sh || exit 1
    - yarn ext:build
    # Okay. So electron-builder hates electron rebuild -- and cause mac build to fail when it is installed.
    # But Theia depends on it to do module building. So lets install it globally and make everyone happy
    - npm i -g electron-rebuild
    # Build IDE
    # This step may fail if .browser-modules does not exist. Running it before build ensure build will pass.
    - yarn ide theia rebuild:electron
    - yarn ide theia build && yarn ide theia download:plugins
    # Some installed packages have no install script, and we need to add it so node-gyp doesn't explode.
    - yarn ide:fix
    - yarn ide package
  #artifacts:
    #expire_in: 1 week
    #paths:
      #- bin/ide/dist/<name>.AppImage


build:ide:linux:
  <<: *emscripten
  <<: *cacheable-node
  stage: bin
  tags: 
    - linux
    - x86-64
  needs: ['test:ui', 'build:core:wasm']
  script:
    - bash scripts/loop-install.sh || exit 1
    - yarn ext:build
    - cd bin/ide
    # Build IDE
    # Missing generated files may cause an endless loop of sadness (via failing to build).
    - yarn theia generate || true
    # This step may fail if .browse-modules does not exist. Running it before build ensure build will pass.
    - yarn theia rebuild:electron || true
    - yarn theia build && bash ../../scripts/loop-download-plugins.sh
    # Some installed packages have no install script, and we need to add it so node-gyp doesn't explode.
    - yarn ide:fix
    - yarn package
  #artifacts:
    #expire_in: 1 week
    #paths:
      #- bin/ide/dist/PepIDE.AppImage

build:jsterm:
  <<: *emscripten
  <<: *cacheable-node
  stage: bin
  tags: 
    - linux
    - x86-64
  needs: ['build:core:wasm']
  script:
    - bash scripts/loop-install.sh || exit 1
    # Build terminal application
    - yarn js-term:pkg
    # Run terminal application tests
  #artifacts:
    #expire_in: 1 week
    #paths:
      #- bin/ide/dist/PepIDE.AppImage

include:
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/Dependency-Scanning.gitlab-ci.yml
  - template: Security/License-Scanning.gitlab-ci.yml
  - template: Security/Secret-Detection.gitlab-ci.yml
